*accessibility.vim*    Vim accessible for every human
                                                               *accessibility*
 >
           +---------------------+            ,-.  ,-.
           |<C-x><C-V>  bla bla  |    ????   /  | /  | Chupaaka
           |<C-W>J      bla      |          | 0 .  0 '.    ,. ka ka
           |________________HELP_|          |   ^     |  .'.'
           |fu#                  |          `.______.' .'.'
           |~                    |      ___  / /_ \ \ _____
           |"file.txt" [New file]|     /JJJJ'-'JJJ'-'JJJJJJ/
           +---------------------+    /JJJJJJJJJJJJJJJJJJJ/
                 ___/   \___          '------------------'
    
    _(Chupaaka doesn't need Vim, she need a non-hostile environment.)_
    
<
License:     GPL (see http://www.gnu.org/licenses/gpl.txt)
Author(s):   luffah
Revision:    2
Last Change: 2019-05-07


This project group usefull scripts to make Vim more accessible.
The scripts themselves are not the easier to use, but allow to prepare
a kind user interface.

==============================================================================
CONTENTS                                              *accessibility-contents*

1. Commands                                           |accessibility-commands|
2. Globals                                             |accessibility-globals|
3. Functions                                         |accessibility-functions|
4. Custom settings                                   |accessibility-customize|
5. File format                                      |accessibility-fileformat|

==============================================================================
COMMANDS                                              *accessibility-commands*

*Multitap*
    Allow to use keypad as a multitap input (experimental)

*:SetColorScheme* [colorscheme]
    Activate colorscheme
    and call -post-proc from |g:scheduled_colorscheme_plan|.
    See also |g:scheduled_colorscheme_secure_change|.

*:HourColorScheme*
    Activate colorscheme corresponding
    to the hour and the type of the current file,
    then  call -post-proc
    See |g:scheduled_colorscheme_plan|.

*:NextColorScheme*
    Shows colorschemes one by one.

*:PrevColorScheme*
    Shows colorschemes one by one (reversed).

*:Layer* [layer_name]
    Toggle [layer_name].

*:Layers*
    List possible values for |:Layer|.

*:KeyMap* [file]
    Source [file] according to the |KeyMap-format|. Use |Keymap#Source()|.


==============================================================================
GLOBALS                                                *accessibility-globals*

*g:disable_accessibility_speak*
    Define if speak plugin shall not be enabled at startup.
    See |g:disable_accessibility_speak_keymap| too.
    Default 0.

*g:disable_accessibility_speak_keymap*
    Define if speak shorcuts shall not be enabled at startup.
    The Speak* commands still enabled.
    Default 0.

*g:disable_accessibility_colortheme*
    Define if colorscheme automatic changes is not be enabled at startup.
    Default 0.

*g:remanent_enable*
    Define if remanent keys are enabled at startup. See |g:remanent_map|.
    Default 0.

*g:remanent_map*
    A dictionnary {'_modifier_':{'_key_':['_mode_',..]}} which
    define the remanent keys.
        _modifier_ -> shift, ctrl, ctrl_shift
        _key_      -> any key to map
        _mode_     -> the mode 'i', 'v', 'c', 'o', 's'  (see |mapmode-|)
                      or 'nr' for replace operation (see |r|)

*g:stick_shift_table*
    Dictionnary to which translate shift keys.
    Default value is set for bÃ©po keymap.
    
    This value shall be set at startup.

*g:scheduled_colorscheme_plan*
    Dictionnary to configure the colorscheme changes raised by |HourColorScheme|.
    It contains lists of colorscheme that partition the day.
    (e.g. : ['am-colorscheme','pm-colorscheme'])
    Keys for defining the list of colorscheme (linked to version of Vim )
    are 'gui' (GVim...), 'term' (vim, nvim-qt..) and 'gui-post-proc',
    'term-post-proc' to customize the theme.

*g:background*
    Usefull for special weather cases, like heat waves to use 'dark' or 'light'
    background used by |HourColorScheme|.

*g:colortheme_hour*
    Usefull for special weather cases, like heat waves to lock hour (0-23) used
    by |HourColorScheme|.

*g:km_file_include_sid*
    To set before using |:Keymap| in order to use script local variable
    and function.

*g:km_file_substs*
    To set before using |:Keymap| in order to use to substitute repetitive
    sequence.
    Require |keymap-inception|. >
         if 0 | endif
         let g:km_file_substs=[
         \ ['pum?', '<expr>pumvisible()?', '']
         \]
    
         KeyMap <sfile>
         finish
         <A-Up>    "Compl.from file  " pum?"<UP>":"<C-x><C-i>"   %  i
         finish
<

*g:km_layer_status*
    Layer status string.
    If you customize your statusline your could need to add : >
      let &statusline="%#ModeMsg#%{g:km_layer_status}%#{}#".&statusline
<

*g:km_mode_hash*
    All known modes, shall not be set before the plugin is loaded
    to modify or add a mode. Example : >
       " 'I' for one-shot normal mode from insert mode
       let g:km_mode_hash['I']=['i','<C-o>','']
<
    A value of this dict is a list : (mode, before_action, after_action)
    Note: after_action is followed by the post-action (see |KeyMap-format|)
    
    Default values (with $A as action, and $P as post-action):
        n -> in normal mode, do $A$P
        : ->               , do :$A<Cr>$P
        i- > in insert mode, do $A$P
        N ->               , do <Esc>$A$P
        I ->               , do <C-o>$A$P
        v -> in select/visual mode, do $A$P
        V ->                     ", do <Esc>$A$P
        s -> in select mode, do $A$P
        S ->               , do <Esc>$A$P
        x -> in visual mode, do $A$P
        X ->               , do <Esc>$A$P
        o -> in operator-pending mode, do $A$P
        O ->                         , do <Esc>$A$P
        l -> in insert/command-line/lang-arg mode, do $A$P
        L ->                                     , do <Esc>$A$P
        c -> in command-line mode, do $A$P
        C ->                     , do <Esc>$A$P
        a ->                     , expand to $A and do $P
        A ->                     , expand to $A if keybind is the first element
                                   (Equivalent of 'alias keybind $A'
                                    with dynamic expansion)

*g:km_status_substitions*
    Representation of the mode in the status bar


==============================================================================
FUNCTIONS                                            *accessibility-functions*

remanent#enable([[silent]])                               *remanent#enable()*
    Enable remanent keys. (map keybinds)
    If [silent] is not provided or is 0, then |g:remanent_map| is shown.

remanent#disable([[silent]])                             *remanent#disable()*
    Disable remanent keys. (unmap keybinds)

remanent#reset()                                           *remanent#reset()*
    Disable and enable remanent keys. (remap keybinds)

colortheme#enable()                                     *colortheme#enable()*
    Enable |SetColorScheme|, |HourColorScheme|,
           |NextColorScheme|, |PrevColorScheme|.
    Enable automatic theme change.
    See |g:scheduled_colorscheme_plan|.

KeyMap#PrintCurrentLayer()                       *KeyMap#PrintCurrentLayer()*
    Print current keybind layer.

KeyMap#Map(name, keybinds, action, modes_and_post_actions)     *KeyMap#Map()*
    Assign keybindings with these arguments
    - name   required for info e.g. 'Save the file', 
    - keybind or keybind list e.g. '<C-s>', ['<C-s>','<C-S'>]
    - action                   e.g. ':w<CR>',
    - list of mode (1st char)
      and post action         e.g. 'i','Ia','n','v' 
    e.g. 'ia' -> for insert mode do the keybinding a reenter in insert mode with 'a' 
    e.g. 'i<Left>' -> for insert mode do the keybinding and move cursor to left

KeyMap#export()                                             *KeyMap#export()*
    export for a faster boot and lighter memory usage
    without dependencies
    and to share your keymap

Keymap#Source([file])                                       *Keymap#Source()*
    Source [file] according to the |KeyMap-format|.

selection#vgetSelectedText()                   *selection#vgetSelectedText()*
    Return selected text (string) while visual mode is activated.

selection#getSelectedText()                     *selection#getSelectedText()*
    Return selected text (string).

selection#Status()                                       *selection#Status()*
    Return a string showing selection size according to its type:
    * if is full line (V), return (line width, selection height)
    * if is square (), return (selection width, selection height)
    * if is per character (v), return the number of characters selected


==============================================================================
CUSTOM SETTINGS                                      *accessibility-customize*

|:HourColorScheme| *colorscheme-plan*
Add following lines in your .vimrc to setup your own colorscheme plan: >
   " Post theme customisation model
    fu! InitCursor()
    hi MatchParen gui=bold guifg=#f500e9 guibg=#000666 cterm=bold ctermfg=Magenta ctermbg=darkred
    hi CursorVisual guibg=#00d0cd guifg=#000666 ctermbg=DarkCyan ctermfg=blue
    hi Cursor guibg=#000000 guifg=#f500e9 ctermbg=LightMagenta ctermfg=black
    set guicursor=i:ver35-CursorVisual,v:hor35-CursorVisual,n-c:block-blinkon0-Cursor
    endfu
   
   " File and Time-relative based colorscheme 
    let g:scheduled_colorscheme_plan={
      'gui':{'*':['molokai','molokai','gruvbox','gruvbox/dark','molokai']}
      'gui-post-proc':'call InitCursor()',
      'term':{'*':['molokai-term','molokai-term','gruvbox/dark','gruvbox/dark','molokai-term']}
      'term-post-proc':'call InitCursor()'}
    let g:scheduled_colorscheme_secure_change=1
    
   " Scheduled changement of colorscheme.
   " Hours are implicits given the number of elements
   " 2 :   0h-12h , 12h-0h
   " 3 :   0h-8h  , 8h-16h ,  16h-0h
   " 4 :   0h-6h  , 6h-12h ,  12h-18h , 18h-0h
   " 5 :   1h-5h  , 5h-10h ,  10h-15h , 15h-20h  ,  20h-1h
   " 6 :   0h-4h  , 4h-8h  ,  8h-12h  , 12h-14h  ,  14h-18h , 18h-20h , 20h-0h
<


==============================================================================
FILE FORMAT                                         *accessibility-fileformat*

*KeyMap-format*
Given :
 * keybind(s) is a list of keybinds (separated by a ' ')
 * Comment is an human description of the action
 * Action is a sequence of keys as it was typed
 * Mode(s)/Post-Action(s) is a list (separated by a ' ') of:
   * Mode is a mode as defined in |g:km_mode_hash|
   * Post-Action is a sequence of keys

The short format to define keymaps is the following. >
 "keybind(s) "Comment"           Action         % mode(s)/post-action(s)
 <F1>        "Cleared key"        <nop>         % c v
 <F2> <F3>   "Cleared keys"       <nop>         % c v
 <A-t>       "Cycle tab"          gt            % n I
 <A-T>       "Cycle tab"          gT            % n I
 
 " Mode variation for an uniq keybind 
 <A-P>       "Do paste"                         % c<C-r>+ I"+P  n"+P  v"+P

 " Use expressions
 <A-Up>   "Complete/select"  <expr>pumvisible()?"<KeyBind>":"<C-x><C-i>" % i

 "Simple commands from normal mode
 <F11> "-" registers %  :

 "Filetype rules
 [FileType python]
 Â          "No invisible space" <Space>         %  c i
 []

 " COMMANDÂ LINEÂ SPECIFIC
 " Dynamic variable expansion
 %%        "Local dir"          %:p:h/          % a

 " Aliases
 tnn       "Show files arround" tabnew %:p:h    % A/<C-d>
 alias qa confirm qa
<
See ./samples/ to get many examples.


vim:tw=78:ts=8:ft=help:norl:
